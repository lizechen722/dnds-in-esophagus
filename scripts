#########Set working directory
setwd("K:/dnds/OneDrive_1_2024-10-8") 

### Load libraries 
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install(c("S4Vectors", "IRanges", "GenomicRanges", "Biostrings", "Rsamtools"))

if (!require(viridis)) {
  install.packages("viridis")
}
library(viridis)
install_github("im3sanger/dndscv", force = TRUE)
library(devtools); install_github("im3sanger/dndscv")
library("dndscv")
library(dplyr)
library(readxl)
library(ggplot2)
library(tidyverse)
library(tidyr)
library(broom)
library(tibble)


###Import data from dndscv 
data("dataset_normaloesophagus", package="dndscv")
dndsout = dndscv(mutations)


# List of donors
donors <- c("PD36806", "PD36712", "PD30272", "PD30986", "PD30987", "PD30274", "PD30988", "PD30273", "PD31182")

# List of gene names of interest

genes_of_interest <- c("NOTCH1", "TP53", "NOTCH2", "FAT1", "ARID1A", "KMT2D", "CUL3", "AJUBA", "PIK3CA", "ARID2", "NFE2L2", "CCND1")


# Initialize an empty data frame to store the final dataset

final_dataset <- data.frame(gene_name = genes_of_interest)

# Loop through each donor and process in chunks

for (donor in donors) {
  
  # Filter for the specific donor
  
  donor_data <- mutations %>%
    
    filter(donor == !!donor)
  
  # Run the dndscv function
  
  dndsout <- dndscv(donor_data)
  
  # Extract sel_cv
  
  sel_cv <- dndsout$sel_cv
  
  # Filter for the genes of interest
  
  filtered_dataset <- sel_cv %>%
    
    filter(gene_name %in% genes_of_interest) %>%
    
    select(gene_name, value = 7) # Adjust 'value' column index as needed
  
  # Merge with the final dataset
  
  final_dataset <- final_dataset %>%
    
    left_join(filtered_dataset, by = "gene_name") %>%
    
    rename(!!donor := value)
  
  # Print progress
  
  cat("Processed donor:", donor, "Â¥n")
  
}


# Set gene names as row names and remove the gene_name column

rownames(final_dataset) <- final_dataset$gene_name

final_dataset <- final_dataset %>%
  
  select(-gene_name)

# Print the final dataset

print(final_dataset)


#donors
donor_data <- read_excel("aau3879_tables1.xlsx", col_names = FALSE)

# Extract the first row to use as column names

new_col_names <- donor_data[2, ]

# Remove the first row from the data

donor_data <- donor_data[-1, ]

# Assign the new column names to the data frame

colnames(donor_data) <- new_col_names

donor_data <- donor_data[-1, ]

str(donor_data$Age)




# Function to calculate midpoint from age range

calculate_midpoint <- function(age_range) {
  
  ages <- as.numeric(unlist(strsplit(age_range, "-")))
  
  midpoint <- mean(ages)
  
  return(midpoint)
  
}


# Replace Age column values with midpoints

donor_data$Age <- sapply(donor_data$Age, calculate_midpoint)


plots <- list()

for (gene_name in genes_of_interest) {
  
  # Subset final_dataset for the current gene
  
  gene_data <- final_dataset[grep(gene_name, rownames(final_dataset)), ]
  
  gene_data <- t(gene_data)
  
  gene_data <- as.data.frame(gene_data)
  
  # Add PD column and move it to the first position
  
  gene_data$PD <- rownames(gene_data)
  
  gene_data <- gene_data[, c(ncol(gene_data), 1:(ncol(gene_data)-1))]
  
  rownames(gene_data) <- NULL
  
  # Merge with donor_data by "PD" and remove unnecessary columns
  
  combined_gene <- merge(donor_data, gene_data, by = "PD")
  
  combined_gene <- combined_gene[, -c(1, 3:13)]
  
  # Plot using ggplot2
  
  p <- ggplot(combined_gene, aes(x = Age, y = .data[[gene_name]])) +
    
    geom_point() + # Add points
    
    labs(x = "Age", y = paste(gene_name, "dN/dS")) + # Labels for axes
    
    ggtitle(paste("Scatter Plot of Age vs", gene_name, "dN/dS")) + # Title for the plot
    
    theme_minimal()
  
  # Save plot to the working directory with a title name
  
  plot_filename <- paste("Plots_2", paste(gene_name, "plot.png", sep = "_"), sep = "/")
  
  ggsave(plot_filename, plot = p, width = 8, height = 6, units = "in", dpi = 300)
  
  # Store plot in the list
  
  plots[[gene_name]] <- p
  
}


plots



#################################



young_donors <- c("PD36806","PD36712","PD30272")
middle_donors <- c("PD30986","PD30987","PD30274","PD30988")
elderly_donors <- c("PD30273","PD31182")


data_age_category <- final_dataset %>%
  mutate(
    young_mean = rowMeans(select(., all_of(young_donors)), na.rm = TRUE),
    middle_mean = rowMeans(select(., all_of(middle_donors)), na.rm = TRUE),
    elderly_mean = rowMeans(select(., all_of(elderly_donors)), na.rm = TRUE)
  )

data_age_category <- data_age_category[,-c(1:9)]

data_age_category <- data_age_category %>%
  rownames_to_column(var = "gene")

data_long <- data_age_category %>%
  pivot_longer(cols = young_mean:elderly_mean, names_to = "donor_group", values_to = "mean_value")

data_long$donor_group <- factor(gsub("_mean", "", data_long$donor_group), levels = c("young", "middle", "elderly"))


############Scattered graph but no linear regression line

custom_colors <- c("#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#66a61e", "#e6ab02", 
                   "#a6761d", "#666666", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99")

ggplot(data_long, aes(x = donor_group, y = mean_value, group = gene, color = gene)) +
  geom_point(shape = 4, size = 3) +  # Change points to crosses and increase size
  geom_line(size = 1) +  # Increase line size
  labs(
    title = "Scatter Line Graph of Mean Values by Donor Group",http://127.0.0.1:22543/graphics/plot_zoom_png?width=1039&height=1015
    x = "Donor Group",
    y = "Mean Value",
    color = "Gene"
  ) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Adjust x-axis text
    axis.text.y = element_text(size = 10),  # Adjust y-axis text
    axis.title = element_text(size = 12, face = "bold"),  # Adjust axis titles
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5),  # Adjust plot title
    legend.title = element_text(size = 12, face = "bold"),  # Adjust legend title
    legend.text = element_text(size = 10),  # Adjust legend text
    legend.position = "bottom",  # Position legend at the bottom
    legend.box = "horizontal",  # Arrange legend items horizontally
    plot.margin = margin(t = 10, r = 10, b = 10, l = 10)  # Reduce margins
  ) +
  scale_color_manual(values = custom_colors)  # Use custom color palette


############ Bar chat (not very efficient)
ggplot(data_long, aes(x = gene, y = mean_value, fill = donor_group)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  labs(
    title = "Mean clonal dN/dS ratio by Age Group per positively selected genes",
    x = "Gene",
    y = "Mean clonal dN/dS ratio",
    fill = "Age Group"
  ) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Rotate x-axis text
    axis.text.y = element_text(size = 10),  # Adjust y-axis text
    axis.title = element_text(size = 12, face = "bold"),  # Adjust axis titles
    plot.title = element_text(size = 13, face = "bold", hjust = 0.5),  # Adjust plot title
    legend.title = element_text(size = 12, face = "bold"),  # Adjust legend title
    legend.text = element_text(size = 10)  # Adjust legend text
  ) +
  scale_fill_brewer(palette = "Set1")




###################### 0 excluded
data_age_category_without_0 <- final_dataset %>%
  mutate(
    young_mean = apply(select(., all_of(young_donors)), 1, function(x) mean(ifelse(x == 0, NA, x), na.rm = TRUE)),
    middle_mean = apply(select(., all_of(middle_donors)), 1, function(x) mean(ifelse(x == 0, NA, x), na.rm = TRUE)),
    elderly_mean = apply(select(., all_of(elderly_donors)), 1, function(x) mean(ifelse(x == 0, NA, x), na.rm = TRUE))
  )


data_age_category_without_0 <- data_age_category_without_0[,-c(1:9)]

data_age_category_without_0 <- data_age_category_without_0 %>%
  rownames_to_column(var = "gene")

data_long_without_0<- data_age_category_without_0 %>%
  pivot_longer(cols = young_mean:elderly_mean, names_to = "donor_group", values_to = "mean_value")

custom_colors <- c("#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#66a61e", "#e6ab02", 
                   "#a6761d", "#666666", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99")

ggplot(data_long_without_0, aes(x = donor_group, y = mean_value, group = gene, color = gene)) +
  geom_point(shape = 4, size = 3) +  # Change points to crosses and increase size
  geom_line(size = 1) +  # Increase line size
  labs(
    title = "Scatter Line Graph of Mean Values by Donor Group",
    x = "Donor Group",
    y = "Mean Value",
    color = "Gene"
  ) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Adjust x-axis text
    axis.text.y = element_text(size = 10),  # Adjust y-axis text
    axis.title = element_text(size = 12, face = "bold"),  # Adjust axis titles
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5),  # Adjust plot title
    legend.title = element_text(size = 12, face = "bold"),  # Adjust legend title
    legend.text = element_text(size = 10),  # Adjust legend text
    legend.position = "bottom",  # Position legend at the bottom
    legend.box = "horizontal",  # Arrange legend items horizontally
    scale_color_manual(values = custom_colors))  # Use custom color palette


data_long_without_0$donor_group <- factor(gsub("_mean", "", data_long_without_0$donor_group), levels = c("young", "middle", "elderly"))


ggplot(data_long_without_0, aes(x = gene, y = mean_value, fill = donor_group)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  labs(
    title = "Mean clonal dN/dS ratio (0 excluded) by Age Group per positively selected genes",
    x = "Gene",
    y = "Mean clonal dN/dS ratio",
    fill = "Age Group"
  ) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Rotate x-axis text
    axis.text.y = element_text(size = 10),  # Adjust y-axis text
    axis.title = element_text(size = 12, face = "bold"),  # Adjust axis titles
    plot.title = element_text(size = 13, face = "bold", hjust = 0.5),  # Adjust plot title
    legend.title = element_text(size = 12, face = "bold"),  # Adjust legend title
    legend.text = element_text(size = 10)  # Adjust legend text
  ) +
  scale_fill_brewer(palette = "Set1")



############################ Linear Regression Model #################################

#####(Testing)######


# Assuming "final_dataset" has gene names as rows and donor IDs as columns
# Melt the data into long format
long_format <- final_dataset %>%
  rownames_to_column("gene_name") %>%  # Move gene names to a column
  pivot_longer(-gene_name, names_to = "donor_id", values_to = "gene_expression")

# Replace donor_id with the corresponding age category
final_long <- long_format %>%
  mutate(age_category = case_when(
    donor_id %in% young_donors ~ "young",
    donor_id %in% middle_donors ~ "middle-age",
    donor_id %in% elderly_donors ~ "elderly"
  )) %>%
  select(age_category, gene_expression)

final_long <- final_long %>%
  filter(gene_expression != 0)


model <- lm(gene_expression ~ age_category, data = final_long)

# Create predictions for visualization (this helps with the gradient)
final_long$predicted <- predict(model)

# Create a plot with gradient
ggplot(final_long, aes(x = age_category, y = gene_expression)) +
  geom_jitter(width = 0.2, aes(color = predicted), size = 2) +  # Scatter plot
  geom_smooth(method = "lm", se = TRUE, color = "black", fill = NA) +  # Add regression line with confidence interval
  scale_color_gradient(low = "blue", high = "red") +  # Optional: Gradient from low to high values
  labs(title = "Gene Expression vs Age Category with Regression Line",
       x = "Age Category",
       y = "Gene Expression",
       color = "Predicted") +
  theme_minimal()

model_summary <- summary(model)

# Extract the p-value for the slope
p_value <- coef(model_summary)[2, "Pr(>|t|)"]  # This gets the p-value for the slope (age_category)

# Check the p-value to test if the slope is significantly greater than zero
cat("P-value for the slope (gradient) being greater than zero:", p_value, "\n")

# If you want a one-tailed test (checking if slope > 0), divide the p-value by 2
p_value_one_tailed <- p_value / 2

cat("One-tailed P-value for the slope being greater than zero:", p_value_one_tailed, "\n")


##########################################################################################

####################### linear model for all##########################



# Initialize an empty data frame to store the final dataset
# This will now include all genes, so we don't initialize with a specific list
all_genes_dataset <- data.frame(gene_name = unique(dndsout$sel_cv$gene_name))  # Use unique gene names from sel_cv

# Loop through each donor and process in chunks
for (donor_id in donors) {
  
  # Filter for the specific donor
  donor_data <- mutations %>%
    filter(donor == !!donor_id)
  
  # Run the dndscv function
  dndsout <- dndscv(donor_data)
  
  # Extract sel_cv
  sel_cv_data <- dndsout$sel_cv
  
  # Keep all genes
  filtered_data <- sel_cv_data %>%
    select(gene_name, value = 7)  # Adjust 'value' column index as needed
  
  # Merge with the final dataset
  all_genes_dataset <- all_genes_dataset %>%
    left_join(filtered_data, by = "gene_name") %>%
    rename(!!donor_id := value)
  
  # Print progress
  cat("Processed donor:", donor_id, "\n")
}


# Move gene names to row names directly
all_genes_dataset <- all_genes_dataset %>%
  column_to_rownames(var = "gene_name")  

# Convert dataset to long format
long_all <- all_genes_dataset %>%
  rownames_to_column("gene_name") %>%  
  pivot_longer(-gene_name, names_to = "donor_id", values_to = "dNdS")


# Replace donor_id with the corresponding age category
filter_long_all <- long_all %>%
  mutate(age_category = case_when(
    donor_id %in% young_donors ~ "young",
    donor_id %in% middle_donors ~ "middle-age",
    donor_id %in% elderly_donors ~ "elderly"
  )) %>%
  select(age_category, dNdS)

filter_long_all <- filter_long_all %>%
  filter(dNdS != 0)

# Fit the linear regression model
linear_model <- lm(dNdS ~ age_category, data = filter_long_all)

# Summary of the linear model to check statistics, including p-values
summary(linear_model)


filter_long_all <- filter_long_all %>%
  mutate(age_category = factor(age_category, levels = c("young", "middle-age", "elderly")))


#####Linear regression of all genes across age categories
    ################# Basically no difference, terrible -> following two graphs

# Visualize the linear regression model using ggplot
ggplot(filter_long_all, aes(x = age_category, y = dNdS)) +
  geom_boxplot(aes(fill = age_category), alpha = 0.6) +  # Add boxplots for each age group
  geom_jitter(width = 0.2, alpha = 0.5, color = "blue") +  # Add points with some jitter for better visibility
  geom_smooth(method = "lm", se = FALSE, color = "red") +  # Add a linear regression line
  theme_minimal() +
  labs(
    title = "Linear Regression of dNdS Across Age Categories",
    x = "Age Category",
    y = "dNdS",
    fill = "Age Category"
  ) +
  scale_fill_brewer(palette = "Set3")  # Use a color palette for the age categories


ggplot(filter_long_all, aes(x = age_category, y = dNdS)) +
  geom_point(aes(color = age_category), position = position_jitter(width = 0.2), alpha = 0.7) +  # Jittered points for each donor
  stat_summary(fun = "mean", geom = "point", size = 5, color = "black") +  # Mean point for each age category
  stat_smooth(method = "lm", se = TRUE, color = "red") +  # Linear regression line with confidence interval
  theme_minimal() +
  labs(
    title = "Linear Regression of dNdS Across Age Categories",
    x = "Age Category",
    y = "dNdS",
    color = "Age Category"
  ) +
  scale_color_brewer(palette = "Set3")  # Use a color palette for the age categories




#####Linear regression for each gene#####

all_genes_dataset_filtered <- all_genes_dataset %>%
  filter(rowSums(all_genes_dataset != 0) > 0)

all_genes_long <- long_all %>%
  filter(dNdS != 0)

# Replace patient IDs with age categories
all_genes_long <- all_genes_long %>%
  mutate(donor_id = case_when(
    donor_id %in% young_donors ~ "young",
    donor_id %in% middle_donors ~ "middle-age",
    donor_id %in% elderly_donors ~ "elderly",
    TRUE ~ donor_id  # Keep the original value if it's not in the donor lists
  ))


all_genes_long$donor_id <- as.factor(all_genes_long$donor_id)
all_genes_long$donor_id <- factor(all_genes_long$donor_id, 
                                  levels = c("young", "middle-age", "elderly"))


##########A massive figure of linear regression of all genes 
ggplot(all_genes_long, aes(x = donor_id, y = dNdS)) +
  geom_point(aes(color = donor_id), position = position_jitter(width = 0.2)) +  # Scatter points with jitter
  geom_smooth(method = "lm", se = FALSE, aes(group = 1),color = "black", linetype = "dashed") +    # Linear regression line
  facet_wrap(~ gene_name, scales = "free_y") +  # Separate plots for each gene
  theme_minimal() +
  labs(title = "dN/dS vs. Age Category for Each Gene",
       x = "Age Category",
       y = "dN/dS") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


#####gradient table (linear regression with standard error)
all_genes_long <- all_genes_long %>%
  mutate(donor_numeric = as.numeric(factor(donor_id, levels = c("young", "middle-age", "elderly"))))


######## Corrected version ######
gradient_table_2_2 <- all_genes_long %>%
  group_by(gene_name) %>%
  filter(n_distinct(donor_id) > 1) %>%
  do(model = lm(dNdS ~ donor_numeric, data = .)) %>%
  summarise(
    gene_name = first(gene_name),
    gradient = summary(model)$coefficients[2, 1],  # Slope
    std_error = summary(model)$coefficients[2, 2]  # Standard Error
  )




# Filter for one gene############################Example
single_gene_data <- all_genes_long[all_genes_long$gene_name == "ADAM29", ]

ggplot(single_gene_data, aes(x = donor_id, y = dNdS)) +
  geom_point(aes(color = donor_id), position = position_jitter(width = 0.2)) + 
  geom_smooth(method = "lm", se = FALSE, aes(group = 1), color = "black", linetype = "dashed") + 
  theme_minimal() +
  labs(title = "dN/dS vs. Age Category for Gene ADAM29",
       x = "Age Category",
       y = "dN/dS") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

model_2 <- lm(dNdS ~ donor_id, data = single_gene_data)
summary(model_2)


############# split the growing and declining genes

growing_genes <- gradient_table_2 %>%
  filter(gradient > 0) %>%
  pull(gene_name)  # Extracts as a vector

growing_genes_long <- all_genes_long %>%
  filter(str_detect(gene_name, paste(growing_genes, collapse = "|")))  

write.csv(gradient_table_2, "gradient_table_2.csv", row.names = FALSE)



# Plot the filtered data
ggplot(growing_genes_long, aes(x = donor_id, y = dNdS)) +
  geom_point(aes(color = donor_id), position = position_jitter(width = 0.2)) +  # Scatter points with jitter
  geom_smooth(method = "lm", se = FALSE, aes(group = 1), color = "black", linetype = "dashed") +  # Linear regression line
  facet_wrap(~ gene_name, scales = "free_y") +  # Separate plots for each gene
  theme_minimal() +
  labs(title = "dN/dS vs. Age Category for Growing Genes",
       x = "Age Category",
       y = "dN/dS") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))



declining_genes <- gradient_table_2 %>%
  filter(gradient < 0) %>%
  pull(gene_name)  # Extracts as a vector

declining_genes_long <- all_genes_long %>%
  filter(str_detect(gene_name, paste(declining_genes, collapse = "|")))  


# Plot the filtered data
ggplot(declining_genes_long, aes(x = donor_id, y = dNdS)) +
  geom_point(aes(color = donor_id), position = position_jitter(width = 0.2)) +  # Scatter points with jitter
  geom_smooth(method = "lm", se = FALSE, aes(group = 1), color = "black", linetype = "dashed") +  # Linear regression line
  facet_wrap(~ gene_name, scales = "free_y") +  # Separate plots for each gene
  theme_minimal() +
  labs(title = "dN/dS vs. Age Category for Declining Genes",
       x = "Age Category",
       y = "dN/dS") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
